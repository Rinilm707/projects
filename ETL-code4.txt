from bs4 import BeautifulSoup
import requests
import sqlite3
import numpy as np
import pandas as pd
from datetime import datetime



url ='https://web.archive.org/web/20230902185655/https://en.everybodywiki.com/100_Most_Highly-Ranked_Films'
db_name = 'Banks.db'
table_name = 'Largest_banks'
csv_path = 'Largest_banks.csv'
table_attribs = ["Name", "MC_USD_Billion","MC_GBP_Billion","MC_EUR_Billion","MC_INR_Billion"]
df = pd.DataFrame(columns=["Name", "MC_USD_Billion","MC_GBP_Billion","MC_EUR_Billion","MC_INR_Billion"])



def extract(url, table_attribs):
    page = requests.get(url).text
    data = BeautifulSoup(page,'html.parser')
    df = pd.DataFrame(columns=table_attribs)
    tables = data.find_all('tbody')
    rows = tables[0].find_all('tr')
    for row in rows:
      col=row.find_all('td')
      if len(col)!=0:
            if col[0].find('a') is not None :
                data_dict = {"Name": col[0].a.contents[0],
                             "MC_USD_Billion": col[1].contents[0],
                             "MC_GBP_Billion": col[2].contents[0],
                             "MC_EUR_Billion": col[3].contents[0],
                             "MC_INR_Billion": col[4].contents[0]}
                df1 = pd.DataFrame(data_dict, index=[0])
                df = pd.concat([df,df1], ignore_index=True)
    return df


def transform(df):
  # df['MC_GBP_Billion'] = [np.round(x*o.93,2) for x in df['MC_GBP_Billion']]
  # df['MC_EUR_Billion'] = [np.round(x*0.8,2) for x in df['MC_EUR_Billion']]
  # df['MC_INR_Billion'] = [np.round(x*82.95,2) for x in df['MC_INR_Billion']]
  # return df
    GBP_list = df["MC_GBP_Billion"].tolist()
    GBP_list = [float("".join(x.split(','))) for x in GBP_list]
    GBP_list = [np.round(x/1000,2) for x in GBP_list]
    df["MC_GBP_Billion"] = GBP_list

    EUR_list = df["MC_EUR_Billion"].tolist()
    EUR_list = [float("".join(x.split(','))) for x in EUR_list]
    EUR_list = [np.round(x/1000,2) for x in EUR_list]
    df["MC_EUR_Billion"] = EUR_list

    INR_list = df["MC_INR_Billion"].tolist()
    INR_list = [float("".join(x.split(','))) for x in INR_list]
    INR_list = [np.round(x/1000,2) for x in INR_list]
    df["MC_INR_Billion"] = INR_list
    return df


def load_to_csv(df, csv_path):
  df.to_csv(csv_path)

def load_to_db(df, sql_connection, table_name):
  df.to_sql(table_name, sql_connection, if_exists='replace', index=False)

def run_query(query_statement, sql_connection):
    print(query_statement)
    query_output = pd.read_sql(query_statement, sql_connection)
    print(query_output)

def log_progress(message):
    timestamp_format = '%Y-%h-%d-%H:%M:%S' # Year-Monthname-Day-Hour-Minute-Second
    now = datetime.now() # get current timestamp
    timestamp = now.strftime(timestamp_format)
    with open("etl_code.ipynb","a") as f:
        f.write(timestamp + ' : ' + message + '\n')


log_progress('Preliminaries complete. Initiating ETL process')
df = extract(url, table_attribs)

log_progress('Data extraction complete. Initiating Transformation process')
df = transform(df)

log_progress('Data transformation complete. Initiating loading process')
load_to_csv(df, csv_path)

log_progress('Data saved to CSV file')
sql_connection = sqlite3.connect('Banks.db')

log_progress('SQL Connection initiated.')
load_to_db(df, sql_connection, table_name)


log_progress('Data loaded to Database as table. Running the query')
query_statement = f"SELECT * FROM Largest_banks"

# log_progress('Data loaded to Database as table. Running the query')
# query_statement = f"SELECT Name,MC_EUR_Billion from {table_name}"

# log_progress('Data loaded to Database as table. Running the query')
# query_statement = f"SELECT Name,MC_GBP_Billion from {table_name} "

run_query(query_statement, sql_connection)
log_progress('Process Complete.')
sql_connection.close()
